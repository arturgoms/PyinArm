
rebootor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000054e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000054e  2**0
                  ALLOC
  3 .stab         0000012c  00000000  00000000  00000550  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000070  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000700  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000058  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000117b  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000c2e  00000000  00000000  00001913  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000005b5  00000000  00000000  00002541  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000104  00000000  00000000  00002af8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000006be  00000000  00000000  00002bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000008dd  00000000  00000000  000032ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000080  00000000  00000000  00003b97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	a8 c0       	rjmp	.+336    	; 0x152 <__ctors_end>
   2:	00 00       	nop
   4:	b6 c0       	rjmp	.+364    	; 0x172 <__bad_interrupt>
   6:	00 00       	nop
   8:	b4 c0       	rjmp	.+360    	; 0x172 <__bad_interrupt>
   a:	00 00       	nop
   c:	b2 c0       	rjmp	.+356    	; 0x172 <__bad_interrupt>
   e:	00 00       	nop
  10:	b0 c0       	rjmp	.+352    	; 0x172 <__bad_interrupt>
  12:	00 00       	nop
  14:	ae c0       	rjmp	.+348    	; 0x172 <__bad_interrupt>
  16:	00 00       	nop
  18:	ac c0       	rjmp	.+344    	; 0x172 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	aa c0       	rjmp	.+340    	; 0x172 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a8 c0       	rjmp	.+336    	; 0x172 <__bad_interrupt>
  22:	00 00       	nop
  24:	a6 c0       	rjmp	.+332    	; 0x172 <__bad_interrupt>
  26:	00 00       	nop
  28:	e6 c0       	rjmp	.+460    	; 0x1f6 <__vector_10>
  2a:	00 00       	nop
  2c:	05 c1       	rjmp	.+522    	; 0x238 <__vector_11>
  2e:	00 00       	nop
  30:	a0 c0       	rjmp	.+320    	; 0x172 <__bad_interrupt>
  32:	00 00       	nop
  34:	9e c0       	rjmp	.+316    	; 0x172 <__bad_interrupt>
  36:	00 00       	nop
  38:	9c c0       	rjmp	.+312    	; 0x172 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	9a c0       	rjmp	.+308    	; 0x172 <__bad_interrupt>
  3e:	00 00       	nop
  40:	98 c0       	rjmp	.+304    	; 0x172 <__bad_interrupt>
  42:	00 00       	nop
  44:	96 c0       	rjmp	.+300    	; 0x172 <__bad_interrupt>
  46:	00 00       	nop
  48:	94 c0       	rjmp	.+296    	; 0x172 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	92 c0       	rjmp	.+292    	; 0x172 <__bad_interrupt>
  4e:	00 00       	nop
  50:	90 c0       	rjmp	.+288    	; 0x172 <__bad_interrupt>
  52:	00 00       	nop
  54:	8e c0       	rjmp	.+284    	; 0x172 <__bad_interrupt>
  56:	00 00       	nop
  58:	8c c0       	rjmp	.+280    	; 0x172 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8a c0       	rjmp	.+276    	; 0x172 <__bad_interrupt>
  5e:	00 00       	nop
  60:	88 c0       	rjmp	.+272    	; 0x172 <__bad_interrupt>
  62:	00 00       	nop
  64:	86 c0       	rjmp	.+268    	; 0x172 <__bad_interrupt>
  66:	00 00       	nop
  68:	84 c0       	rjmp	.+264    	; 0x172 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	82 c0       	rjmp	.+260    	; 0x172 <__bad_interrupt>
  6e:	00 00       	nop
  70:	80 c0       	rjmp	.+256    	; 0x172 <__bad_interrupt>
  72:	00 00       	nop
  74:	7e c0       	rjmp	.+252    	; 0x172 <__bad_interrupt>
  76:	00 00       	nop
  78:	7c c0       	rjmp	.+248    	; 0x172 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	7a c0       	rjmp	.+244    	; 0x172 <__bad_interrupt>
  7e:	00 00       	nop
  80:	78 c0       	rjmp	.+240    	; 0x172 <__bad_interrupt>
  82:	00 00       	nop
  84:	76 c0       	rjmp	.+236    	; 0x172 <__bad_interrupt>
  86:	00 00       	nop
  88:	74 c0       	rjmp	.+232    	; 0x172 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	72 c0       	rjmp	.+228    	; 0x172 <__bad_interrupt>
  8e:	00 00       	nop
  90:	70 c0       	rjmp	.+224    	; 0x172 <__bad_interrupt>
  92:	00 00       	nop
  94:	6e c0       	rjmp	.+220    	; 0x172 <__bad_interrupt>
  96:	00 00       	nop
  98:	6c c0       	rjmp	.+216    	; 0x172 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	6a c0       	rjmp	.+212    	; 0x172 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	68 c0       	rjmp	.+208    	; 0x172 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	66 c0       	rjmp	.+204    	; 0x172 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	64 c0       	rjmp	.+200    	; 0x172 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <descriptor_list>:
  ac:	00 01 00 00 39 01 12 00 02 00 00 01 01 22 00 22     ....9........"."
  bc:	00 00 23 01 16 00 21 00 00 13 01 09 00 03 00 00     ..#...!.........
  cc:	fd 00 04 01 03 09 04 f1 00 0a 02 03 09 04 dd 00     ................
  dc:	12                                                  .

000000dd <string2>:
  dd:	12 03 52 00 65 00 62 00 6f 00 6f 00 74 00 6f 00     ..R.e.b.o.o.t.o.
  ed:	72 00 00 00                                         r...

000000f1 <string1>:
  f1:	0a 03 50 00 4a 00 52 00 43 00 00 00                 ..P.J.R.C...

000000fd <string0>:
  fd:	04 03 09 04                                         ....

00000101 <config1_descriptor>:
 101:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
 111:	00 00 09 21 11 01 00 01 22 16 00 07 05 81 03 08     ...!....".......
 121:	00 80                                               ..

00000123 <rawhid_hid_report_desc>:
 123:	06 00 ff 0a 00 01 a1 01 75 08 15 00 26 ff 00 95     ........u...&...
 133:	06 09 02 91 02 c0                                   ......

00000139 <device_descriptor>:
 139:	12 01 00 02 00 00 00 20 c0 16 77 04 00 01 01 02     ....... ..w.....
 149:	00 01                                               ..

0000014b <endpoint_config_table>:
 14b:	01 c1 02 00 00 00 00                                .......

00000152 <__ctors_end>:
 152:	11 24       	eor	r1, r1
 154:	1f be       	out	0x3f, r1	; 63
 156:	cf ef       	ldi	r28, 0xFF	; 255
 158:	da e0       	ldi	r29, 0x0A	; 10
 15a:	de bf       	out	0x3e, r29	; 62
 15c:	cd bf       	out	0x3d, r28	; 61

0000015e <__do_clear_bss>:
 15e:	21 e0       	ldi	r18, 0x01	; 1
 160:	a0 e0       	ldi	r26, 0x00	; 0
 162:	b1 e0       	ldi	r27, 0x01	; 1
 164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
 166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
 168:	a1 30       	cpi	r26, 0x01	; 1
 16a:	b2 07       	cpc	r27, r18
 16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
 16e:	02 d0       	rcall	.+4      	; 0x174 <main>
 170:	b2 c1       	rjmp	.+868    	; 0x4d6 <_exit>

00000172 <__bad_interrupt>:
 172:	46 cf       	rjmp	.-372    	; 0x0 <__vectors>

00000174 <main>:
#define CPU_PRESCALE(n)	(CLKPR = 0x80, CLKPR = (n))

int main(void)
{
	// set for 1 MHz clock
	CPU_PRESCALE(4);
 174:	80 e8       	ldi	r24, 0x80	; 128
 176:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 17a:	84 e0       	ldi	r24, 0x04	; 4
 17c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	// set all pins as inputs with pullup resistors
	#if defined(PORTA)
	DDRF = 0;
	PORTF = 0xFF;
	#endif
	DDRB = 0;
 180:	14 b8       	out	0x04, r1	; 4
	PORTB = 0xFF;
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	85 b9       	out	0x05, r24	; 5
	DDRC = 0;
 186:	17 b8       	out	0x07, r1	; 7
	PORTC = 0xFF;
 188:	88 b9       	out	0x08, r24	; 8
	DDRD = 0;
 18a:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0xFF;
 18c:	8b b9       	out	0x0b, r24	; 11
	#if defined(PORTE)
	DDRE = 0;
 18e:	1d b8       	out	0x0d, r1	; 13
	PORTE = 0xFF;
 190:	8e b9       	out	0x0e, r24	; 14
	#endif
	#if defined(PORTF)
	DDRF = 0;
 192:	10 ba       	out	0x10, r1	; 16
	PORTF = 0xFF;
	#endif

	// initialize USB
	usb_init();
 194:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	18 d0       	rcall	.+48     	; 0x1c8 <usb_init>
 198:	89 ef       	ldi	r24, 0xF9	; 249
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <main+0x28>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0x2e>

	// do nothing (USB code handles reboot message)
	while (1) {
		_delay_ms(1);
		// put the CPU into low power idle mode
		set_sleep_mode(SLEEP_MODE_IDLE);
 1a2:	00 00       	nop
 1a4:	83 b7       	in	r24, 0x33	; 51
 1a6:	81 7f       	andi	r24, 0xF1	; 241
		cli();
 1a8:	83 bf       	out	0x33, r24	; 51
		sleep_enable();
 1aa:	f8 94       	cli
 1ac:	83 b7       	in	r24, 0x33	; 51
 1ae:	81 60       	ori	r24, 0x01	; 1
		sei();
 1b0:	83 bf       	out	0x33, r24	; 51
		sleep_cpu();
 1b2:	78 94       	sei
		sleep_disable();
 1b4:	88 95       	sleep
 1b6:	83 b7       	in	r24, 0x33	; 51
 1b8:	8e 7f       	andi	r24, 0xFE	; 254
 1ba:	83 bf       	out	0x33, r24	; 51
 1bc:	ed cf       	rjmp	.-38     	; 0x198 <main+0x24>

000001be <usb_wait_in_ready>:


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 1be:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 1c2:	80 ff       	sbrs	r24, 0
 1c4:	fc cf       	rjmp	.-8      	; 0x1be <usb_wait_in_ready>
}
 1c6:	08 95       	ret

000001c8 <usb_init>:
	HW_CONFIG();
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
	USB_FREEZE();				// enable USB
 1ce:	80 ea       	ldi	r24, 0xA0	; 160
 1d0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	PLL_CONFIG();				// config PLL
 1d4:	82 e1       	ldi	r24, 0x12	; 18
 1d6:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 1d8:	09 b4       	in	r0, 0x29	; 41
 1da:	00 fe       	sbrs	r0, 0
 1dc:	fd cf       	rjmp	.-6      	; 0x1d8 <usb_init+0x10>
        USB_CONFIG();				// start USB clock
 1de:	80 e9       	ldi	r24, 0x90	; 144
 1e0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
        UDCON = 0;				// enable attach resistor
 1e4:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
	usb_configuration = 0;
 1e8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
        UDIEN = (1<<EORSTE);
 1ec:	88 e0       	ldi	r24, 0x08	; 8
 1ee:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	sei();
 1f2:	78 94       	sei
 1f4:	08 95       	ret

000001f6 <__vector_10>:
{
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	8f 93       	push	r24
        intbits = UDINT;
 202:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        UDINT = 0;
 206:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        if (intbits & (1<<EORSTI)) {
 20a:	83 ff       	sbrs	r24, 3
 20c:	0f c0       	rjmp	.+30     	; 0x22c <__vector_10+0x36>
		UENUM = 0;
 20e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		UECONX = 1;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG0X = EP_TYPE_CONTROL;
 218:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 21c:	82 e2       	ldi	r24, 0x22	; 34
 21e:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		UEIENX = (1<<RXSTPE);
 222:	88 e0       	ldi	r24, 0x08	; 8
 224:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		usb_configuration = 0;
 228:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
}
 22c:	8f 91       	pop	r24
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 238:	1f 92       	push	r1
 23a:	0f 92       	push	r0
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	0f 92       	push	r0
 240:	11 24       	eor	r1, r1
 242:	ef 92       	push	r14
 244:	ff 92       	push	r15
 246:	0f 93       	push	r16
 248:	1f 93       	push	r17
 24a:	2f 93       	push	r18
 24c:	3f 93       	push	r19
 24e:	4f 93       	push	r20
 250:	5f 93       	push	r21
 252:	6f 93       	push	r22
 254:	7f 93       	push	r23
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
 25a:	af 93       	push	r26
 25c:	bf 93       	push	r27
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	ef 93       	push	r30
 264:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 266:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	intbits = UEINTX;
 26a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (intbits & (1<<RXSTPI)) {
 26e:	83 ff       	sbrs	r24, 3
 270:	75 c0       	rjmp	.+234    	; 0x35c <__vector_11+0x124>
                bmRequestType = UEDATX;
 272:	d0 91 f1 00 	lds	r29, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                bRequest = UEDATX;
 276:	c0 91 f1 00 	lds	r28, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wValue = UEDATX;
 27a:	e0 90 f1 00 	lds	r14, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wValue |= (UEDATX << 8);
 27e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 282:	f1 2c       	mov	r15, r1
 284:	f8 2a       	or	r15, r24
                wIndex = UEDATX;
 286:	00 91 f1 00 	lds	r16, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wIndex |= (UEDATX << 8);
 28a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 28e:	10 e0       	ldi	r17, 0x00	; 0
 290:	18 2b       	or	r17, r24
                wLength = UEDATX;
 292:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wLength |= (UEDATX << 8);
 296:	60 91 f1 00 	lds	r22, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 29a:	92 ef       	ldi	r25, 0xF2	; 242
 29c:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                if (bRequest == GET_DESCRIPTOR) {
 2a0:	c6 30       	cpi	r28, 0x06	; 6
 2a2:	09 f0       	breq	.+2      	; 0x2a6 <__vector_11+0x6e>
 2a4:	65 c0       	rjmp	.+202    	; 0x370 <__vector_11+0x138>
 2a6:	2c ea       	ldi	r18, 0xAC	; 172
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	4d ed       	ldi	r20, 0xDD	; 221
 2ac:	50 e0       	ldi	r21, 0x00	; 0
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
 2ae:	f9 01       	movw	r30, r18
 2b0:	a5 91       	lpm	r26, Z+
 2b2:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
 2b4:	ea 16       	cp	r14, r26
 2b6:	fb 06       	cpc	r15, r27
 2b8:	09 f0       	breq	.+2      	; 0x2bc <__vector_11+0x84>
 2ba:	4a c0       	rjmp	.+148    	; 0x350 <__vector_11+0x118>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
 2bc:	f9 01       	movw	r30, r18
 2be:	32 96       	adiw	r30, 0x02	; 2
 2c0:	a5 91       	lpm	r26, Z+
 2c2:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
 2c4:	0a 17       	cp	r16, r26
 2c6:	1b 07       	cpc	r17, r27
 2c8:	09 f0       	breq	.+2      	; 0x2cc <__vector_11+0x94>
 2ca:	42 c0       	rjmp	.+132    	; 0x350 <__vector_11+0x118>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 2cc:	f9 01       	movw	r30, r18
 2ce:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
 2d0:	45 91       	lpm	r20, Z+
 2d2:	54 91       	lpm	r21, Z
				list += 2;
 2d4:	f9 01       	movw	r30, r18
 2d6:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
 2d8:	e4 91       	lpm	r30, Z
                wLength |= (UEDATX << 8);
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	96 2b       	or	r25, r22
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 2de:	8f 3f       	cpi	r24, 0xFF	; 255
 2e0:	91 05       	cpc	r25, r1
 2e2:	19 f0       	breq	.+6      	; 0x2ea <__vector_11+0xb2>
 2e4:	10 f0       	brcs	.+4      	; 0x2ea <__vector_11+0xb2>
 2e6:	8f ef       	ldi	r24, 0xFF	; 255
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	e8 17       	cp	r30, r24
 2ec:	08 f4       	brcc	.+2      	; 0x2f0 <__vector_11+0xb8>
 2ee:	8e 2f       	mov	r24, r30
	UEINTX = ~(1<<TXINI);
 2f0:	3e ef       	ldi	r19, 0xFE	; 254
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 2f2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 2f6:	29 2f       	mov	r18, r25
 2f8:	25 70       	andi	r18, 0x05	; 5
 2fa:	d9 f3       	breq	.-10     	; 0x2f2 <__vector_11+0xba>
				if (i & (1<<RXOUTI)) return;	// abort
 2fc:	92 fd       	sbrc	r25, 2
 2fe:	11 c0       	rjmp	.+34     	; 0x322 <__vector_11+0xea>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 300:	98 2f       	mov	r25, r24
 302:	81 32       	cpi	r24, 0x21	; 33
 304:	08 f0       	brcs	.+2      	; 0x308 <__vector_11+0xd0>
 306:	90 e2       	ldi	r25, 0x20	; 32
 308:	fa 01       	movw	r30, r20
				for (i = n; i; i--) {
 30a:	29 2f       	mov	r18, r25
 30c:	21 11       	cpse	r18, r1
 30e:	2a c0       	rjmp	.+84     	; 0x364 <__vector_11+0x12c>
 310:	49 0f       	add	r20, r25
 312:	51 1d       	adc	r21, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 314:	89 1b       	sub	r24, r25
	UEINTX = ~(1<<TXINI);
 316:	30 93 e8 00 	sts	0x00E8, r19	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 31a:	81 11       	cpse	r24, r1
 31c:	ea cf       	rjmp	.-44     	; 0x2f2 <__vector_11+0xba>
 31e:	90 32       	cpi	r25, 0x20	; 32
 320:	41 f3       	breq	.-48     	; 0x2f2 <__vector_11+0xba>
				return;
			}
		}
	}
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
 322:	ff 91       	pop	r31
 324:	ef 91       	pop	r30
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	bf 91       	pop	r27
 32c:	af 91       	pop	r26
 32e:	9f 91       	pop	r25
 330:	8f 91       	pop	r24
 332:	7f 91       	pop	r23
 334:	6f 91       	pop	r22
 336:	5f 91       	pop	r21
 338:	4f 91       	pop	r20
 33a:	3f 91       	pop	r19
 33c:	2f 91       	pop	r18
 33e:	1f 91       	pop	r17
 340:	0f 91       	pop	r16
 342:	ff 90       	pop	r15
 344:	ef 90       	pop	r14
 346:	0f 90       	pop	r0
 348:	0f be       	out	0x3f, r0	; 63
 34a:	0f 90       	pop	r0
 34c:	1f 90       	pop	r1
 34e:	18 95       	reti
 350:	29 5f       	subi	r18, 0xF9	; 249
 352:	3f 4f       	sbci	r19, 0xFF	; 255
				if (i >= NUM_DESC_LIST) {
 354:	42 17       	cp	r20, r18
 356:	53 07       	cpc	r21, r19
 358:	09 f0       	breq	.+2      	; 0x35c <__vector_11+0x124>
 35a:	a9 cf       	rjmp	.-174    	; 0x2ae <__vector_11+0x76>
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 35c:	81 e2       	ldi	r24, 0x21	; 33
 35e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 362:	df cf       	rjmp	.-66     	; 0x322 <__vector_11+0xea>
					UEDATX = pgm_read_byte(desc_addr++);
 364:	64 91       	lpm	r22, Z
 366:	60 93 f1 00 	sts	0x00F1, r22	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				for (i = n; i; i--) {
 36a:	21 50       	subi	r18, 0x01	; 1
 36c:	31 96       	adiw	r30, 0x01	; 1
 36e:	ce cf       	rjmp	.-100    	; 0x30c <__vector_11+0xd4>
		if (bRequest == SET_ADDRESS) {
 370:	c5 30       	cpi	r28, 0x05	; 5
 372:	49 f4       	brne	.+18     	; 0x386 <__vector_11+0x14e>
	UEINTX = ~(1<<TXINI);
 374:	8e ef       	ldi	r24, 0xFE	; 254
 376:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			UDADDR = wValue | (1<<ADDEN);
 37a:	21 df       	rcall	.-446    	; 0x1be <usb_wait_in_ready>
 37c:	8e 2d       	mov	r24, r14
 37e:	80 68       	ori	r24, 0x80	; 128
 380:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 384:	ce cf       	rjmp	.-100    	; 0x322 <__vector_11+0xea>
 386:	c9 30       	cpi	r28, 0x09	; 9
 388:	49 f5       	brne	.+82     	; 0x3dc <__vector_11+0x1a4>
 38a:	d1 11       	cpse	r29, r1
			usb_configuration = wValue;
 38c:	69 c0       	rjmp	.+210    	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
 38e:	e0 92 00 01 	sts	0x0100, r14	; 0x800100 <_edata>
	UEINTX = ~(1<<TXINI);
 392:	8e ef       	ldi	r24, 0xFE	; 254
 394:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			cfg = endpoint_config_table;
 398:	21 e0       	ldi	r18, 0x01	; 1
 39a:	8b e4       	ldi	r24, 0x4B	; 75
				UENUM = i;
 39c:	91 e0       	ldi	r25, 0x01	; 1
 39e:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				en = pgm_read_byte(cfg++);
 3a2:	ac 01       	movw	r20, r24
 3a4:	4f 5f       	subi	r20, 0xFF	; 255
 3a6:	5f 4f       	sbci	r21, 0xFF	; 255
 3a8:	fc 01       	movw	r30, r24
				UECONX = en;
 3aa:	34 91       	lpm	r19, Z
 3ac:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				if (en) {
 3b0:	33 23       	and	r19, r19
					UECFG0X = pgm_read_byte(cfg++);
 3b2:	91 f0       	breq	.+36     	; 0x3d8 <__vector_11+0x1a0>
 3b4:	fa 01       	movw	r30, r20
 3b6:	44 91       	lpm	r20, Z
 3b8:	40 93 ec 00 	sts	0x00EC, r20	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
					UECFG1X = pgm_read_byte(cfg++);
 3bc:	31 96       	adiw	r30, 0x01	; 1
 3be:	e4 91       	lpm	r30, Z
 3c0:	03 96       	adiw	r24, 0x03	; 3
 3c2:	e0 93 ed 00 	sts	0x00ED, r30	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			for (i=1; i<5; i++) {
 3c6:	2f 5f       	subi	r18, 0xFF	; 255
 3c8:	25 30       	cpi	r18, 0x05	; 5
        		UERST = 0x1E;
 3ca:	49 f7       	brne	.-46     	; 0x39e <__vector_11+0x166>
					UERST = (1 << i);
 3cc:	8e e1       	ldi	r24, 0x1E	; 30
 3ce:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
					UERST = 0;
 3d2:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				en = pgm_read_byte(cfg++);
 3d6:	a5 cf       	rjmp	.-182    	; 0x322 <__vector_11+0xea>
 3d8:	ca 01       	movw	r24, r20
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 3da:	f5 cf       	rjmp	.-22     	; 0x3c6 <__vector_11+0x18e>
 3dc:	c8 30       	cpi	r28, 0x08	; 8
 3de:	61 f4       	brne	.+24     	; 0x3f8 <__vector_11+0x1c0>
 3e0:	d0 38       	cpi	r29, 0x80	; 128
			usb_wait_in_ready();
 3e2:	09 f0       	breq	.+2      	; 0x3e6 <__vector_11+0x1ae>
 3e4:	3d c0       	rjmp	.+122    	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
			UEDATX = usb_configuration;
 3e6:	eb de       	rcall	.-554    	; 0x1be <usb_wait_in_ready>
 3e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 3ec:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	UEINTX = ~(1<<TXINI);
 3f0:	8e ef       	ldi	r24, 0xFE	; 254
 3f2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			usb_wait_in_ready();
 3f6:	95 cf       	rjmp	.-214    	; 0x322 <__vector_11+0xea>
 3f8:	c1 11       	cpse	r28, r1
			if (bmRequestType == 0x82) {
 3fa:	11 c0       	rjmp	.+34     	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
 3fc:	e0 de       	rcall	.-576    	; 0x1be <usb_wait_in_ready>
				UENUM = wIndex;
 3fe:	d2 38       	cpi	r29, 0x82	; 130
 400:	49 f4       	brne	.+18     	; 0x414 <__FUSE_REGION_LENGTH__+0x14>
				if (UECONX & (1<<STALLRQ)) i = 1;
 402:	00 93 e9 00 	sts	0x00E9, r16	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 406:	c0 91 eb 00 	lds	r28, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 40a:	c5 fb       	bst	r28, 5
				UENUM = 0;
 40c:	cc 27       	eor	r28, r28
 40e:	c0 f9       	bld	r28, 0
			UEDATX = i;
 410:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			UEDATX = 0;
 414:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 418:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 41c:	e9 cf       	rjmp	.-46     	; 0x3f0 <__vector_11+0x1b8>
 41e:	8c 2f       	mov	r24, r28
 420:	8d 7f       	andi	r24, 0xFD	; 253
		  && bmRequestType == 0x02 && wValue == 0) {
 422:	81 30       	cpi	r24, 0x01	; 1
 424:	e9 f4       	brne	.+58     	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
 426:	d2 30       	cpi	r29, 0x02	; 2
 428:	d9 f4       	brne	.+54     	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
 42a:	ef 28       	or	r14, r15
			i = wIndex & 0x7F;
 42c:	09 f0       	breq	.+2      	; 0x430 <__FUSE_REGION_LENGTH__+0x30>
			if (i >= 1 && i <= MAX_ENDPOINT) {
 42e:	96 cf       	rjmp	.-212    	; 0x35c <__vector_11+0x124>
 430:	0f 77       	andi	r16, 0x7F	; 127
 432:	8f ef       	ldi	r24, 0xFF	; 255
 434:	80 0f       	add	r24, r16
 436:	84 30       	cpi	r24, 0x04	; 4
	UEINTX = ~(1<<TXINI);
 438:	08 f0       	brcs	.+2      	; 0x43c <__FUSE_REGION_LENGTH__+0x3c>
 43a:	90 cf       	rjmp	.-224    	; 0x35c <__vector_11+0x124>
 43c:	8e ef       	ldi	r24, 0xFE	; 254
				UENUM = i;
 43e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				if (bRequest == SET_FEATURE) {
 442:	00 93 e9 00 	sts	0x00E9, r16	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 446:	c3 30       	cpi	r28, 0x03	; 3
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 448:	09 f4       	brne	.+2      	; 0x44c <__FUSE_REGION_LENGTH__+0x4c>
 44a:	88 cf       	rjmp	.-240    	; 0x35c <__vector_11+0x124>
 44c:	89 e1       	ldi	r24, 0x19	; 25
					UERST = (1 << i);
 44e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	01 c0       	rjmp	.+2      	; 0x45a <__FUSE_REGION_LENGTH__+0x5a>
 458:	88 0f       	add	r24, r24
 45a:	0a 95       	dec	r16
		if (wIndex == 0) {
 45c:	ea f7       	brpl	.-6      	; 0x458 <__FUSE_REGION_LENGTH__+0x58>
 45e:	b7 cf       	rjmp	.-146    	; 0x3ce <__vector_11+0x196>
 460:	01 2b       	or	r16, r17
			if (bmRequestType == 0x21 && bRequest == HID_SET_REPORT) {
 462:	09 f0       	breq	.+2      	; 0x466 <__FUSE_REGION_LENGTH__+0x66>
 464:	7b cf       	rjmp	.-266    	; 0x35c <__vector_11+0x124>
 466:	d1 32       	cpi	r29, 0x21	; 33
 468:	09 f0       	breq	.+2      	; 0x46c <__FUSE_REGION_LENGTH__+0x6c>
 46a:	78 cf       	rjmp	.-272    	; 0x35c <__vector_11+0x124>
 46c:	c9 30       	cpi	r28, 0x09	; 9
	while (!(UEINTX & (1<<RXOUTI))) ;
 46e:	09 f0       	breq	.+2      	; 0x472 <__FUSE_REGION_LENGTH__+0x72>
 470:	75 cf       	rjmp	.-278    	; 0x35c <__vector_11+0x124>
 472:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					buf[0] = UEDATX;
 476:	82 ff       	sbrs	r24, 2
 478:	fc cf       	rjmp	.-8      	; 0x472 <__FUSE_REGION_LENGTH__+0x72>
					buf[1] = UEDATX;
 47a:	50 91 f1 00 	lds	r21, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					buf[2] = UEDATX;
 47e:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					buf[3] = UEDATX;
 482:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					buf[4] = UEDATX;
 486:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					buf[5] = UEDATX;
 48a:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					if (buf[0] == 'r' && buf[1] == 'e' && buf[2] == 'b'
 48e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 492:	52 37       	cpi	r21, 0x72	; 114
 494:	d9 f4       	brne	.+54     	; 0x4cc <__FUSE_REGION_LENGTH__+0xcc>
 496:	45 36       	cpi	r20, 0x65	; 101
 498:	c9 f4       	brne	.+50     	; 0x4cc <__FUSE_REGION_LENGTH__+0xcc>
					 && buf[3] == 'o' && buf[4] == 'o' && buf[5] == 't') {
 49a:	32 36       	cpi	r19, 0x62	; 98
 49c:	b9 f4       	brne	.+46     	; 0x4cc <__FUSE_REGION_LENGTH__+0xcc>
 49e:	2f 36       	cpi	r18, 0x6F	; 111
 4a0:	a9 f4       	brne	.+42     	; 0x4cc <__FUSE_REGION_LENGTH__+0xcc>
 4a2:	9f 36       	cpi	r25, 0x6F	; 111
 4a4:	99 f4       	brne	.+38     	; 0x4cc <__FUSE_REGION_LENGTH__+0xcc>
						PORTB = 0, PORTC = 0, PORTD = 0;
 4a6:	84 37       	cpi	r24, 0x74	; 116
 4a8:	89 f4       	brne	.+34     	; 0x4cc <__FUSE_REGION_LENGTH__+0xcc>
 4aa:	15 b8       	out	0x05, r1	; 5
						DDRB = 0xFF, DDRC = 0xFF, DDRD = 0xFF;
 4ac:	18 b8       	out	0x08, r1	; 8
 4ae:	1b b8       	out	0x0b, r1	; 11
 4b0:	8f ef       	ldi	r24, 0xFF	; 255
 4b2:	84 b9       	out	0x04, r24	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b4:	87 b9       	out	0x07, r24	; 7
 4b6:	8a b9       	out	0x0a, r24	; 10
 4b8:	f8 e0       	ldi	r31, 0x08	; 8
 4ba:	fa 95       	dec	r31
						DDRB = 0, DDRC = 0, DDRD = 0;
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <__FUSE_REGION_LENGTH__+0xba>
 4be:	00 00       	nop
 4c0:	14 b8       	out	0x04, r1	; 4
						PORTB = 0xFF, PORTC = 0xFF, PORTD = 0xFF;
 4c2:	17 b8       	out	0x07, r1	; 7
 4c4:	1a b8       	out	0x0a, r1	; 10
	UEINTX = ~(1<<RXOUTI);
 4c6:	85 b9       	out	0x05, r24	; 5
 4c8:	88 b9       	out	0x08, r24	; 8
				usb_wait_in_ready();
 4ca:	8b b9       	out	0x0b, r24	; 11
 4cc:	8b ef       	ldi	r24, 0xFB	; 251
 4ce:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 4d2:	75 de       	rcall	.-790    	; 0x1be <usb_wait_in_ready>
 4d4:	8d cf       	rjmp	.-230    	; 0x3f0 <__vector_11+0x1b8>

000004d6 <_exit>:
 4d6:	f8 94       	cli

000004d8 <__stop_program>:
 4d8:	ff cf       	rjmp	.-2      	; 0x4d8 <__stop_program>
